using Mel.Live.Extensions;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Mel.Live.Models
{
    public interface IRange<T>
    {
        T Start { get; }
        T End { get; }
        bool Includes(T value);
        bool Includes(IRange<T> range);
    }

    public class Range<T> where T : IComparable<T>
    {
        public Range(T start, T end)
        {
            Start = start;
            End = end;
        }

        public virtual T Start { get; }

        public virtual T End { get; }

        public virtual bool Includes(T value) => Start.CompareTo(value) <= 0 && End.CompareTo(value) >= 0;

        public virtual bool Includes(Range<T> range) => Start.CompareTo(range.Start) <= 0 && End.CompareTo(range.End) >= 0;
    }

    [Owned]
    public class TimeRange
    {
        public TimeSpan Start { get; set; }
        public TimeSpan End { get; set; }

        public TimeRange(TimeSpan start, TimeSpan end)
        {
            Start = start;
            End = end;
        }

        public bool Includes(TimeSpan value) => Start.CompareTo(value) <= 0 && End.CompareTo(value) >= 0;
        public bool Includes(IRange<TimeSpan> range) => Start.CompareTo(range.Start) <= 0 && End.CompareTo(range.End) >= 0;
        public override string ToString() => this.ToHumanReadableString();
    }

    [Owned]
    public class DateRange : IRange<DateTime>
    {
        public static DateRange AllTime => new DateRange(DateTime.MinValue, DateTime.Now);

        public bool AutoGenerated { get; private set; }

        DateTime _start;
        public DateTime Start { get => _start; set { _start = value; AutoGenerated = false; } }

        DateTime _end;
        public DateTime End { get => _end; set { _end = value; AutoGenerated = false; } }

        /// <summary>
        /// Start the DateRange from a day ago to this very moment
        /// </summary>
        public DateRange() : this(DateTime.Now - TimeSpan.FromDays(1), DateTime.Now)
        {
            AutoGenerated = true;
        }

        public DateRange(DateTime start, DateTime end)
        {
            if (start > end)
            {
                DateTime buffer = start;
                start = end;
                end = buffer;
            }

            Start = start;
            End = end;
        }

        public bool Includes(DateTime value) => Start.CompareTo(value) <= 0 && End.CompareTo(value) >= 0;
        public bool Includes(IRange<DateTime> range) => Start.CompareTo(range.Start) <= 0 && End.CompareTo(range.End) >= 0;
        public TimeSpan GetDifference() => End - Start;
    }
}
